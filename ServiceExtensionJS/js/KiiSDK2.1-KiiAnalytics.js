// Generated by CoffeeScript 1.6.2
(function() {
  var KiiAnalyticsRequest, root, _KiiAnalytics;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  root.KiiAnalyticsSite = {
    US: "https://api.kii.com/api",
    JP: "https://api-jp.kii.com/api",
    CN: "https://api-cn2.kii.com/api"
  };

  /**
      @class The main SDK class
      @exports root.KiiAnalytics as KiiAnalytics
      
      This class must be initialized before any KiiAnalytics SDK functions are performed. This class also allows the application to make some high-level user calls and access some application-wide data at any time using static methods.
  */


  root.KiiAnalytics = (function() {
    var _instance;

    function KiiAnalytics() {}

    _instance = null;

    KiiAnalytics.getBaseURL = function() {
      return _instance._baseURL;
    };

    /**
        Set a custom API endpoint URL
        @param String url A string containing the desired endpoint
    */


    KiiAnalytics.setBaseURL = function(url) {
      KiiAnalytics.logger("Setting base URL: " + url);
      return _instance._baseURL = url;
    };

    /**
        Retrieve the current app ID
        @returns {String} The current app ID
    */


    KiiAnalytics.getAppID = function() {
      return _instance._appID;
    };

    /**
        Retrieve the current app key
        @returns {String} The current app key
    */


    KiiAnalytics.getAppKey = function() {
      return _instance._appKey;
    };

    /**
        Kii Analytics SDK Version Number
        @returns {String} current version number of the SDK
    */


    KiiAnalytics.getSDKVersion = function() {
      return "2.1.1";
    };

    KiiAnalytics.getAppKey = function() {
      return _instance._appKey;
    };

    /**
        Is the SDK printing logs to the console?
        @returns {Boolean} True if printing logs, false otherwise
    */


    KiiAnalytics.isLogging = function() {
      return _instance._logging;
    };

    /**
        Set the logging status of the SDK
        
        Helpful for development - we strongly advice you turn off logging for any production code.
        @param Boolean True if logs should be printed, false otherwise
        @example
        KiiAnalytics.setLogging(true);
    */


    KiiAnalytics.setLogging = function(logging) {
      KiiAnalytics.logger("Setting logging: " + logging);
      return _instance._logging = logging;
    };

    /** Initialize the Kii SDK with a specific URL
    
    Should be the first Kii SDK action your application makes
    @param String appID The application ID found in your Kii developer console
    @param String appKey The application key found in your Kii developer console
    @param KiiAnalyticsSite site Can be one of the constants KiiAnalyticsSite.US or KiiAnalyticsSite.JP, depending on your location.
    NOTE: KiiAnalyticsSite.CN is not available now. please wait for official launch of cloud in China.
    @example
    Kii.initializeWithSite("my-app-id", "my-app-key", KiiAnalyticsSite.JP);
    */


    KiiAnalytics.initializeWithSite = function(appID, appKey, site) {
      if (_instance == null) {
        _instance = new _KiiAnalytics(appID, appKey, site);
      }
      return KiiAnalytics.logger("Initialized " + appID + ", " + appKey + ", " + site);
    };

    /** Initialize the KiiAnalytics SDK
    
    Should be the first KiiAnalytics SDK action your application makes
    @param String appID The application ID found in your Kii developer console
    @param String appKey The application key found in your Kii developer console
    @example
    KiiAnalytics.initialize("my-app-id", "my-app-key");
    */


    KiiAnalytics.initialize = function(appID, appKey) {
      return KiiAnalytics.initializeWithSite(appID, appKey, KiiAnalyticsSite.US);
    };

    KiiAnalytics.error = function(message) {
      return console.log("KiiAnalytics SDK Error => " + message);
    };

    /** 
        Utilize the KiiAnalytics logger to track SDK-specific actions
        
        Helpful for development - we strongly advice you turn off logging for any production code.
        @param String message The message to print to console.log in your browser
        @example
        KiiAnalytics.logger("My message");
    */


    KiiAnalytics.logger = function(message) {
      if (_instance._logging) {
        return console.log("KiiAnalytics => " + message);
      }
    };

    /** Log a single event to be uploaded to KiiAnalytics
    
    Use this method if you'd like to track an event by name only. If you'd like to track other attributes/dimensions, please use KiiAnalytics.trackEventWithExtras(eventName, parameters)
    
    Will return TRUE every time unless there was an error writing to the cache.
    @param {String} eventName A string representing the event name for later tracking
    @return {Boolean} TRUE if the event was added properly, FALSE otherwise
    */


    KiiAnalytics.trackEvent = function(eventName) {
      return KiiAnalytics.trackEventWithExtras(eventName, null);
    };

    /** Log a single event to be uploaded to KiiAnalytics
    
    Use this method if you'd like to track an event by name and add extra information to the event.
    Will return TRUE every time unless there was an error writing to the cache OR if one of the extra key/value pairs was not JSON-encodable.
    @param {String} eventName A string representing the event name for later tracking
    @param {Object} extras A dictionary of JSON-encodable key/value pairs to be attached to the event
    @return {Boolean} TRUE if the event was added properly, FALSE otherwise
    */


    KiiAnalytics.trackEventWithExtras = function(eventName, extras) {
      return KiiAnalytics.trackEventWithExtrasAndCallbacks(eventName, null, null);
    };

    KiiAnalytics.trackEventWithExtrasAndCallbacks = function(eventName, extras, callbacks) {
      var key, now, payload, request, trackingCallbacks, value;

      now = Math.round((new Date()).getTime());
      payload = {
        _triggeredAt: now,
        _uploadedAt: now,
        _deviceID: "device1",
        _type: eventName
      };
      request = new KiiAnalyticsRequest("/event");
      request.data = payload;
      request.method = "POST";
      request.anonymous = true;
      request.contentType = "application/vnd.kii.Event+json";
      for (key in extras) {
        value = extras[key];
        request[key] = value;
      }
      trackingCallbacks = {
        success: function(data) {
          if (callbacks != null) {
            return callbacks.success();
          }
        },
        failure: function(error, statusCode) {
          if (callbacks != null) {
            return callbacks.failure(error, statusCode);
          }
        }
      };
      return request.execute(trackingCallbacks, false);
    };

    return KiiAnalytics;

  }).call(this);

  _KiiAnalytics = (function() {
    _KiiAnalytics.prototype._logging = true;

    _KiiAnalytics.prototype._baseURL = null;

    function _KiiAnalytics(appID, appKey, site) {
      if (site === KiiAnalyticsSite.JP) {
        site = KiiAnalyticsSite.JP;
      } else if (site === KiiAnalyticsSite.CN) {
        site = KiiAnalyticsSite.CN;
      } else {
        site = KiiAnalyticsSite.US;
      }
      this._appKey = appKey;
      this._appID = appID;
      this._baseURL = site;
    }

    return _KiiAnalytics;

  })();

  KiiAnalyticsRequest = (function() {
    var _thisRequest;

    _thisRequest = null;

    function KiiAnalyticsRequest(path) {
      _thisRequest = this;
      this.path = "/apps/" + (KiiAnalytics.getAppID()) + path;
      this.method = "GET";
      this.headers = {
        "user-agent": "js/1.0",
        "accept": "*/*"
      };
      this.data = null;
      this.contentType = "application/json";
      this.anonymous = false;
      this.accept = null;
      this.success = function() {};
      this.failure = function() {};
    }

    KiiAnalyticsRequest.prototype.execute = function(callbacks, ignoreBody) {
      var ajaxData, json_text, url;

      if (callbacks != null) {
        this.success = callbacks.success != null ? callbacks.success : this.success;
        this.failure = callbacks.failure != null ? callbacks.failure : this.failure;
      }
      url = KiiAnalytics.getBaseURL() + this.path;
      json_text = JSON.stringify(this.data);
      KiiAnalytics.logger("Making request[" + this.method + "] to " + url + " with path: " + this.path + " and data: " + json_text);
      this.headers['x-kii-appid'] = KiiAnalytics.getAppID();
      this.headers['x-kii-appkey'] = KiiAnalytics.getAppKey();
      if (this.accept != null) {
        this.headers['accept'] = this.accept;
      }
      this.headers['x-kii-path'] = this.path;
      if (!this.anonymous) {
        this.headers['Authorization'] = "Bearer " + (KiiAnalytics.getAccessToken());
      }
      ajaxData = {
        type: this.method,
        url: url,
        dataType: "json",
        headers: this.headers,
        contentType: this.contentType,
        complete: function(xhr, status) {
          var data, errString, error, numstatus, suc;

          KiiAnalytics.logger("Completed Request[" + xhr.status + "]");
          KiiAnalytics.logger(xhr.responseText);
          numstatus = parseInt(xhr.status, 10);
          suc = 200 <= numstatus && numstatus < 400;
          data = null;
          if (!ignoreBody) {
            try {
              data = jQuery.parseJSON(xhr.responseText);
            } catch (_error) {
              error = _error;
              data = null;
            }
          }
          if (suc) {
            return _thisRequest.success(data, xhr.status);
          } else {
            errString = null;
            if (data != null) {
              if (data.errorCode != null) {
                errString = data.errorCode;
                if (data.message != null) {
                  errString += ": " + data.message;
                }
              }
            }
            return _thisRequest.failure(errString, xhr.status);
          }
        }
      };
      if (json_text != null) {
        ajaxData.headers['content-length'] = json_text.length;
        ajaxData.data = json_text;
        ajaxData.processData = false;
      }
      return $.ajax(ajaxData);
    };

    return KiiAnalyticsRequest;

  })();

}).call(this);
